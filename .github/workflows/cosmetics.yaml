name: Cosmetics
run-name: Cosmetics triggered by ${{ github.event_name }}

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Group of log lines
        run: |
            echo "::group::My title"
            echo "Inside group"
            echo "::endgroup::"
      - name: Generate job summary using Markdown
        run: |
          echo "### Hello world! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "Line 1
          Line2" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Lets add a bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- Lets add a second bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- How about a third one?" >> $GITHUB_STEP_SUMMARY

  test:
    name: Test Job with trigger ${{ github.event_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Run a one-line script with trigger ${{ github.event_name }}
        run: echo Hello, world!
      - name: Test warning
        run: |
          echo "::warning::Some warning"
      - name: Generate job summary using Markdown
        run: |
          echo "### Hello world! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Lets add a bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- Lets add a second bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- How about a third one?" >> $GITHUB_STEP_SUMMARY          

  js:
    runs-on: ubuntu-latest
    steps:
      - name: JS Test
        uses: satackey/action-js-inline@v0.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        id: getdata
        with:
          script: |
            const github = require('@actions/github');
            const core = require('@actions/core');

            core.startGroup('console.log test');
            console.log(github.context);
            core.endGroup();

            core.startGroup('GitHub Context');
            core.info(github.context);
            core.endGroup();
            
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN)

            core.startGroup('GitHub Tags');
            const tags = [];
            async function *listAllTags() {
              let i = 1;
              let tags_page;
              do {
                core.debug(`Loop: ${i}`);
                const response = await octokit.rest.repos.listTags({
                  owner: github.context.repo.owner,
                  repo: github.context.repo.repo,
                  per_page: 100,
                  page: i++
                });
                tags_page = response.data.map(t => t.name);
                core.debug(`Loop: ${i}, ${tags_page}`);
                yield tags_page;
              } while (tags_page.length);
            }
            for await (const snippet of listAllTags()) {
              tags.push(...snippet);
            }

            core.info(`Output: ${tags}`);
            core.endGroup();

            await core.summary
              .addHeading('Test Results')
              .addCodeBlock(JSON.stringify(tags, null, 2), "json")
              .addTable([
                [{data: 'File', header: true}, {data: 'Result', header: true}],
                ['foo.js', 'Pass ✅'],
                ['bar.js', 'Fail ❌'],
                ['test.js', 'Pass ✅']
              ])
              .addLink('View staging deployment!', 'https://github.com')
              .write()
